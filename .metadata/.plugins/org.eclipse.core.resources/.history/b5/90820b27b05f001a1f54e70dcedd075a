package textLocaliserTest;

import java.util.HashMap;
import java.util.Map;

public class MyTextLocaliser implements TextLocaliser {
	
public boolean isDigit(String character) {
	if ("0123456789".contains(character)) {
		return false;
	}
	else {
		return true;
	}
}
	
public String findDelimiter(String Text) {
	
	boolean delimiter = false;
	String array[] = Text.split("");
	int n = 0;
	String delimiterValue = null;
	
	while (delimiter == false) {
		
		boolean found = isDigit(array[n]);
		
		if(found == true) {
			delimiter = true;
			delimiterValue = array[n];
			
		}
		
		else {n++;}
	}
	return delimiterValue;
}

public int findIndexNumber(String array [], String value) {
	int indexNumberValue = 0;
	boolean foundValue = false;
	while (foundValue == false) {
		boolean test = array[indexNumberValue].contains(value);
		if (test == true) {
			foundValue = true;
		}
		else {
			indexNumberValue++;
		}
	}
	return indexNumberValue;
}


public static void main (String [] args) {
	TextLocaliser MyConverter = new MyTextLocaliser();
	
	Map<String, String> dateformats = new HashMap<String, String>();
	MyConverter.loadDateFormats(dateformats); // how does this work and why did i put it here
	
	Map<String, String> currencyformats = new HashMap<String, String>();
	MyConverter.loadCurrencyFormats(currencyformats); // how does this work and why did i put it here
}



@Override
public void loadDateFormats(Map<String, String> dateformats) {
	dateformats = new HashMap<String, String>();	// might not need this line
	dateformats.put("US", "mm/dd/yy");
	dateformats.put("UK", "dd/mm/yyyy");
	dateformats.put("DE", "yyyy-mm-dd");
}

@Override
public String localiesDate(String inputFormat, String outputFormat, String inputText) {
	
	String inputTextDelimiterValue = findDelimiter(inputText);
	String inputTextDateFields[] = inputText.split(inputTextDelimiterValue);
	
	Map<String, String> inputMap = new HashMap<String, String>();
	loadDateFormats(inputMap);
	String inputDateFormat = inputMap.get(inputFormat);
	String inputFormatDelimiterValue = findDelimiter(inputDateFormat);
	String inputFormatDateFields[] = inputText.split(inputFormatDelimiterValue);
	
	Map<String, String> outputMap = new HashMap<String, String>();
	loadDateFormats(outputMap);
	String outputDateFormat = outputMap.get(inputFormat);
	String outputFormatDelimiterValue = findDelimiter(outputDateFormat);
	String outputFormatDateFields[] = inputText.split(outputFormatDelimiterValue);
	
	
	Map<String, String> convert = new HashMap<String, String>();
	for (int i = 0; i <= inputFormatDateFields.length; i++) {
		convert.put(inputFormatDateFields[i], inputTextDateFields[i]);
	}
	
	int inputYear = findIndexNumber(inputFormatDateFields, "y");
	int outputYear = findIndexNumber(outputFormatDateFields, "y");
	
	if (outputFormatDateFields[outputYear] == inputFormatDateFields[inputYear]) {}
	
	else if (inputFormatDateFields[inputYear].equals("yy")) {
		outputFormatDateFields[outputYear] = "20" + inputTextDateFields[inputYear];
	}
	
	else {
		outputFormatDateFields[outputYear] = inputTextDateFields[inputYear].substring(2);
	}
	
	String localisedDate = convert.get(outputFormatDateFields[0]) + outputFormatDelimiterValue + 
			convert.get(outputFormatDateFields[1]) + outputFormatDelimiterValue + 
			convert.get(outputFormatDateFields[2]);
	return localisedDate;
}

//Completed up to this point

@Override
public void loadCurrencyFormats(Map<String, String> currencyformats) {
	currencyformats = new HashMap<String, String>(); // might not need this line
	currencyformats.put("US", "en_US");	// en_US, en_GB and de_DE mean to change all currency symbols from input to the correct output
	currencyformats.put("UK", "en_GB");
	currencyformats.put("DE", "de_DE");
	
}

@Override
public String localiseCurrency(String inputFormat, String outputFormat, double inputText) {
	
	double exchangeRate = 0;		// find a way to allow for more currencies to be added
	if (inputFormat.equals("UK")) {
		if (outputFormat.equals("DE")) {
			exchangeRate = 1.15;
		}
		else if (outputFormat.equals("US")) {
			exchangeRate = 1.30;
		}
		else {
			exchangeRate = 1;
		}
	}
	else if (inputFormat.equals("US")) {
		if (outputFormat.equals("DE")) {
			exchangeRate = 0.88;
		}
		else if (outputFormat.equals("UK")) {
			exchangeRate = 0.77;
		}
		else {
			exchangeRate = 1;
		}
	}
	else if (inputFormat.equals("DE")) {
		if (outputFormat.equals("UK")) {
			exchangeRate = 0.87;
		}
		else if (outputFormat.equals("US")) {
			exchangeRate = 1.13;
		}
		else {
			exchangeRate = 1;
		}
	}
	
	else {
		exchangeRate = 1;
		}
	
	double finalValue = inputText*exchangeRate;
	String localisedCurrency = Double.toString(finalValue);
	return localisedCurrency;
}

@Override
public String localise(String inputFormat, String outputFormat, String inputtext) {
	
	//need to read through file (TEXT) to find inputDate and inputCurrency
	
	String inputDate = "Example";
	String localDate = localiesDate(inputFormat, outputFormat, inputDate);
	
	double inputCurrency = 1000.00;
	String localCurrency = localiseCurrency(inputFormat, outputFormat, inputCurrency);
	
	
	String localisedValues = localDate + localCurrency;
	return localisedValues;
}}
